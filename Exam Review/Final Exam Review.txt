Exam 1 content

/*
1) order the following big oh's from fastest to slowest
n^(log3(2)) = 6,103
n = 1,000,000
n^(log2(3)) = 3,234,260,553
n^2 = 1e12
3^n = overflow
n! = overflow
n^n = overflow

Order:

n^(log3(2)) < n < n^(log2(3)) < n^2(quadratic) < 3^n(exponential) < n! < n^n



// RECURSIVE BINARY SEARCH FUNCTION BELOW:

int binarySearchRec(int * arr, int left, int right, int target)
{
  // base case (when should we stop doing the binary search)
  if (left > right) // if the array has only 1 number, left == right
  {
    // we did not find the target in the array
    return -1;
  }

  int midpoint = (left + right) / 2; // midpoint is the middle index in the array
  // It doesn't matter if the array is even or odd, we will still get to middleish


  // Use else if when your function has void return type

  if(arr[midpoint] == target) // check if we found the target at the value at the midpoint
  {
    // we could return the index of the number once we find it
    return midpoint;
  }

  // we did not find the number at the midpoint
  if (target < arr[midpoint]) // our target is to the left
  {
    // recursive call
   return binarySearchRec(arr, left, midpoint - 1, target);
  }

  if (target > arr[midpoint])// if the target is to the right
  {
    return binarySearchRec(arr, midpoint + 1, right, target);
  }

  return - 1;
}



// ITERATIVE BINARY STRING SEARCH BELOW:

void binarySearch(char **arr, int size, char *target)
{
  // The first part of the function is still the same as a binary search for an integer array because we just need a low and high index
  int lowIndex = 0;
  int highIndex = size - 1;

  // the while loop is still the same as the integer version of the binary search
  while (lowIndex <= highIndex)
  {
      // finding the midpoint is still the same as the integer version of the binary search
      int mid = (lowIndex + highIndex) / 2;

      // The part that changes with using an array of strings instead of integers is how we compare the values.
      // since we are using strings we have to use strcmp();

      // if the target is the same as the word at the mid index, we just say that we found the word in the array
      if (strcmp(target, arr[mid]) == 0)
      {
          printf("The word is in the array\n");
          // We return because we are done using this function
          return;
      }

      // now we check if the target is smaller than the word at the midpoint
      if (strcmp(target, arr[mid]) < 0)
      {
          // if it is we change the high index as usual
          highIndex = mid - 1;
      }

      // now we check if the target is larger than the word at the midpoint
      else if (strcmp(target, arr[mid]) > 0)
      {
          // if it is then we change the low index as usual
          lowIndex = mid + 1;
      }
  }

  // if we make it out of the loop, then the word is not in the array
  printf("The word is not in the array\n");
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Exam 2 content

--------------------------------------------------------------------------
Stacks and Queues
--------------------------------------------------------------------------

Acronyms
1. FIFO - First in, first out (queue)
2. LIFO - Last in, last out (stack) (can also be FILO)


Queue Info:
- store both the head and the tail

Queue vocab
- add values to the end of the list (enqueue) (add to tail)
- remove values from front          (dequeue) (remove from head)
- look at the front of a queue      (peek)


Stack Info:
- store the head of the list

Stack vocab
- add value to the stack                       (push)
- removing from the stack                      (pop)
- looking at the value at the top of the stack (top)


--------------------------------------------------------------------------
TREES
--------------------------------------------------------------------------

Tree Traversals:

pre-order -> root first       (add values from left to right as given)
in order -> root middle       (least to greatest)
post-order -> root last       (add values from right to left as given)

how to read from given traversals
- pre-order: from left to right
- post-order: backwards (from right to left)
- in-order: highest value is the root 




Balance Factor Formula
           BF = |Dr - Dl|
Tree is balance if BF is = -1, 0, 1


  Types of imbalances:              (require)
  - LL: left left                   (1 rotation to the right)
  - RR: right right                 (1 rotation to the left)
  - LR: left right                  (2 rotations to the left, then to the right)
  - RL: right left                  (2 rotations to the right, then to the left)

  For AVL tree rotation, check from the BOTTOM -> UP


Worst cases for the following:

  insert to BST:                                     O(n) - all nodes are on one side so it becomes basically a linked list
  remove from AVL tree:                              O(log(n)) - AVL trees are always balanced, so the average big Oh is the same as worst case
  remove tail from doubly linked list:               O(n) - we have to transverse to the tail first which is O(n)
  add to tail to circular linked list:               O(1)
  add to head of a circular linked list:             O(1)
  remove node at position n in circular linked list: O(n)
  add a value at position n on doubly linked list (storing both head and tail): O(n)



--------------------------------------------------------------------------
Post-fix and In-fix
--------------------------------------------------------------------------
(No parenthesis in post-fix)
(in-fix should ALWAYS finish with a ")" )


infix -> postfix

- when you push a closing parenthesis into the stack, we pop everything until we reach open parenthesis

- when you push something with the same priority as the thing below it, pop the thing below it      (* /, + -)

- if the thing you push has lower priority over the thing below it, we pop the thing below it       (+ on top of *, - on top of /)

- always take out the rest of the stack at the end


- (Note: if you push something with a higher priority over the thing below it, DO NOTHING)




postfix -> answer

* just add to the stack and make the operations whenever a symbol is added to the stack

------------------------------------------------------------------------------------------
Topics that will be on the exam:
1) AVL trees
2) BST
3) Stack
4) queues
5) postfix and infix
6) single linked list
7) doubly linked list
8) circular singly linked list
9) circular doubly linked list
10) structs for linked lists


things to focus on:
- big oh questions about different data structures
- stacks (FILO) vs queue concepts (FIFO)
- infix and postfix
- creating AVL tree while rotating it when it gets unbalanced
- inorder, postorder, preorder
- different linked lists and their differences


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Last part of the Exam content

----------------------------------------------------------------------------------------------------------------------------------------------------------------
HEAPS
----------------------------------------------------------------------------------------------------------------------------------------------------------------
  Determine the big Oh of the following scenarios:

  1) typical big Oh for min/max heaps          = O(log(n))
  2) adding a value from an empty min heap     = O(m * log(n))
  3) removing a value from a max heap          = O(log(n))
  4) freeing a max heap                        = O(n) -> we have to free every single thing, which is O(n)
  5) finding the smallest value in a min Heap  = O(1) -> because it's always the root
  6) removing the smallest value in a min Heap = O(log(n))
  
  Worst Case Big Oh: O(log(n))

  Average Big Oh: O(log(n))

  min heap:
  - priority queue
  - smallest value has to be the root
  - Binary Tree implemented using an array
  - each child must be greater than the its parent
  - is filled from left to right

  max heap:
  - greatest value has to be the root
  - Binary Tree implemented using an array
  - each child must be smaller than the its parent

  Vocabulary:
  - to move from level to level = percolate (up / down)
  - priority value = root

  Formulas:
  - root index has to be 0 (*****)
  - Parent Index = (child index - 1) / 2
  - Left Child Index = (parent index * 2) + 1
  - Right Child Index = (parent index * 2) + 2
  
  
  
  
  For deleteMin() or deleteMax() operations: 
  1. replace the deleted node with the farthest right node
  2. keep checking that node to maintain heap property  
  
  

----------------------------------------------------------------------------------------------------------------------------------------------------------------
TRIES
----------------------------------------------------------------------------------------------------------------------------------------------------------------
  Useful for storing elements that have similar beginnings, like passwords, or DNA sequences

  Create a trie with the following words:
  - hell
  - hello
  - hey
  - how
  - help
  - art

  for the "hell" word:
  h = index 7 (because it's the 7th letter in the alphabet)
  'h' - 'a' = 7   -> how to get it
  next letter...
  'e' - 'a' = 4
  next letter...
  'l' - 'a' = 11
  next letter...
  'l' - 'a' = 11

  and then set the node->flag = 1 when the word ends

  Worst case big oh of searching for a string in a trie? -> O(k), where 'k' is a long string (constant runtime)
  - the longer the string we are looking for, the longer the big Oh.




----------------------------------------------------------------------------------------------------------------------------------------------------------------
Hash Tables
----------------------------------------------------------------------------------------------------------------------------------------------------------------
  -> Look Up time (avg): O(1)

  -> we take in a value and turn it into a key  (value-> key) *****
  prevelance -> key > value
  the key (usually a number) is used as an index

  -> key-value pair
   ^ (what enables us to have a lookup time of O(1) )

   the name hash comes from the hash function

   hash function:
   - pass in the key
   - "hash" the key
   - you make your own hash function (based on what you are storing)
   - turn your String into an integer
   - modulo that integer by the size of table

   Dealing with collision:
   - linear probing = look at all available indexes until you find an available one
   - quadratic probing = use following formula:
   (index + 1^2) if there's still a collision, move to (index + 2^2).....
   if index is bigger than table size, do:
   (index % table size)
   - chaining / bucketing






















//
